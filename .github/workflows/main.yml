name: Deploy web en IPFS

on:
    push:
      branches:
        - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Configuración Node
        uses: actions/setup-node@v4
        with:
            node-version: 20
            cache: "npm"

      - name: Instalación dependencias
        run: npm install

      - name: Build
        run: npm run build

      - name: Crear carpeta y mover los archivos del build
        run: |
          REPO="${{ github.event.repository.name }}"
          echo "Creando la carpeta: $REPO_NAME"
          mkdir -p $REPO
          mv dist $REPO/

      - name: Comprimir Carpeta
        run: |
          REPO="${{ github.event.repository.name }}"
          tar -czvf $REPO.tar.gz $REPO
          echo "Archivo comprimido"

      - name: Limpiar versión anterior en `~/pruebas`
        env: 
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP \ "REPO='${{ github.event.repository.name }}' bash -s" <<'EOF'
            
            cd ~/pruebas
            if [ -d "$REPO" ]; then
                echo "Eliminando la última versión"
                ULTIMO_CID=$(cat $REPO/ultimo_cid.txt)
                ipfs pin rm -r "$ULTIMO_CID"
                rm -rf "$REPO"
            fi

          EOF


      - name: Subir el archivo comprimido al servidor (`~/pruebas`)
        env: 
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Subiendo archivo comprimido al servidor."
          scp ${{ github.event.repository.name }}.tar.gz $SERVER_USER@$SERVER_IP:~/pruebas

      - name: Despliegue en IPFS desde `~/pruebas`
        env:
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          ssh $SERVER_USER@$SERVER_IP \ "REPO='${{ github.event.repository.name }}' IPNS_KEY='${{ secrets.IPNS_KEY }}' bash -s" <<'EOF'

            cd ~/pruebas

            echo " Extrayendo el nuevo contenido"
            mkdir -p $REPO
            tar -xzvf $REPO.tar.gz -C ~/pruebas
            
            rm -rf ~/pruebas/$REPO.tar.gz

            CID=$(ipfs add -r -Q $REPO/dist)

            echo "Publicando en IPNS..."
            if ! ipfs key list | grep -wq "$IPNS_KEY"; then
                echo "Clave IPNS '$IPNS_KEY' no encontrada. Creándola..."
                ipfs key gen "$IPNS_KEY"
            fi

            IPNS_ID=$(ipfs key list -l | grep "$IPNS_KEY" | awk '{print $1}')
            ipfs name publish --key="$IPNS_KEY" /ipfs/$CID
            echo "Accede a tu contenido en IPNS: https://ipfs.io/ipns/$IPNS_ID"

            echo "$CID" > $REPO/ultimo_cid.txt

            echo "Creando archivo de registro..."
            FECHA=$(date +"%Y-%m-%d %H:%M")
            echo "Fecha de despliegue: $FECHA" > $REPO/registro.txt
            echo "CID: $CID" >> $REPO/deployment_info.txt
            echo "Clave IPNS: $IPNS_KEY" >> $REPO/registro.txt
            echo "Archivo de registro creado en ~/pruebas/$REPO/registro.txt"
          EOF
